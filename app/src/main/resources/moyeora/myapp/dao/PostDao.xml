<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="moyeora.myapp.dao.PostDao">

  <resultMap id="PostMap" type="Post">

    <id column="post_no" property="no"/>
    <result column="school_no" property="schoolNo"/>
    <result column="user_no" property="userNo"/>
    <result column="category_no" property="categoryNo"/>
    <result column="content" property="content"/>
    <result column="created_at" property="createdAt"/>
    <result column="like_count" property="likeCount"/>
    <result column="comment_count" property="commentCount"/>

    <association property="writer" javaType="User">
      <id column="user_no" property="no"/>
      <result column="name" property="name"/>
      <result column="photo" property="photo"/>
      <result column="nickname" property="nickname"/>
      <result column="grade" property="grade"/>
    </association>

    <association property="schoolUser" javaType="SchoolUser">
      <id column="user_no" property="userNo"/>
    </association>

    <association property="school" javaType="School">
      <id column="school_no" property="no"/>
      <result column="school_name" property="name"/>
      <result column="school_photo" property="photo"/>
    </association>

    <collection property="fileList" ofType="AttachedFile">
      <id column="file_no" property="no"/>
      <result column="path" property="path"/>
      <result column="name" property="fileName"/>
      <result column="post_no" property="postNo"/>
    </collection>

    <collection property="comments" ofType="Comment">
    <id column="comment_no" property="no"/>
    <result column="content" property="content"/>
    <result column="created_at" property="createdAt"/>
    <result column="user_no" property="userNo"/>
    <result column="post_no" property="postNo"/>
    </collection>

  </resultMap>

<insert id="add" parameterType="Post"
    useGeneratedKeys="true" keyColumn="post_no" keyProperty="no">
    insert into posts(content, school_no, user_no, created_at)
<!--    values(#{content}, #{schoolNo}, #{userNo}, NOW())-->
    values(#{content}, 1, 1, NOW())
</insert>




<delete id="delete" parameterType="int">
    delete from posts
    where post_no = #{no} and school_no = #{schoolNo}
</delete>

    <update id="update" parameterType="Post">
      update posts set
        content=#{content}
      where
        post_no=#{no} and school_no=#{schoolNo}
    </update>


  <select id="findBy" resultMap="PostMap" parameterType="int">
  select
      p.post_no,
      p.content,
      p.created_at,
      u.name
  from
      posts p inner join users u on p.user_no=u.user_no
  where
      post_no=#{value}
  </select>


  <select id="findByLike" resultMap="PostMap" parameterType="int">
    SELECT
    u.user_no,
    u.name AS user_name,
    p.post_no,
    s.school_no,
    p.created_at,
    (select count(*) from likes as l where l.post_no=p.post_no) as like_count,
    (select count(*) from comments as c where c.post_no=p.post_no) as comment_count,
    s.name AS school_name,
    s.photo AS school_photo,
    p.content AS post_content,
    f.path,
    f.name,
    f.post_no
    FROM
    posts p
    INNER JOIN schools s ON s.school_no = p.school_no
    INNER JOIN users u ON p.user_no = u.user_no
    LEFT OUTER JOIN files f ON p.post_no = f.post_no
    order by like_count desc;

  </select>
  <select id="findByFollow" resultMap="PostMap" parameterType="int">
    SELECT
    u.user_no,
    u.name AS user_name,
    p.post_no,
    s.school_no,
    p.created_at,
    (select count(*) from likes as l where l.post_no=p.post_no) as like_count,
    (select count(*) from comments as c where c.post_no=p.post_no) as comment_count,
    s.name AS school_name,
    s.photo AS school_photo,
    p.content AS post_content,
    f.path,
    f.name,
    f.post_no
    FROM
    posts p
    INNER JOIN schools s ON s.school_no = p.school_no
    INNER JOIN users u ON p.user_no = u.user_no
    INNER JOIN follows fo ON fo.follower_user_no = u.user_no
    LEFT OUTER JOIN files f ON p.post_no = f.post_no
    where fo.following_user_no=#{no};

  </select>
  <select id="findByUser" resultMap="PostMap" parameterType="int">
    SELECT
    u.user_no,
    u.name AS user_name,
    p.post_no,
    s.school_no,
    p.created_at,
    (select count(*) from likes as l where l.post_no=p.post_no) as like_count,
    (select count(*) from comments as c where c.post_no=p.post_no) as comment_count,
    s.name AS school_name,
    s.photo AS school_photo,
    p.content AS post_content,
    f.path,
    f.name,
    f.post_no
    FROM
    posts p
    INNER JOIN schools s ON s.school_no = p.school_no
    INNER JOIN users u ON p.user_no = u.user_no
    LEFT OUTER JOIN files f ON p.post_no = f.post_no
    where p.user_no=#{no}
    order by p.created_at desc;
  </select>

  <select id="findBySchoolPost" resultMap="PostMap">
    select
      post_no,
      school_no,
      user_no,
      category_no,
      content,
      created_at
    from
      posts
  </select>
  <select id="findAll" resultMap="PostMap">
    SELECT distinct
      u.name,
      p.post_no,
      p.school_no,
      p.user_no,
      p.content,
      p.created_at
    FROM
      posts AS p
    JOIN school_users AS su ON p.user_no = su.user_no
    JOIN users AS u ON su.user_no = u.user_no;
  </select>



<!-- 검색 내용이 포함된 게시글 찾기 -->
<select id="findBySchoolContent" resultMap="PostMap">
    SELECT
        u.user_no,
        u.nickname,
        u.photo,
        p.post_no,
        s.school_no,
        p.created_at,
        (SELECT COUNT(*) FROM likes AS l WHERE l.post_no = p.post_no) AS like_count,
        (SELECT COUNT(*) FROM comments AS c WHERE c.post_no = p.post_no) AS comment_count,
        s.name AS school_name,
        s.photo AS school_photo,
        p.content,
        f.path,
        f.name,
        f.post_no
    FROM
        posts p
    INNER JOIN
        schools s ON s.school_no = p.school_no
    INNER JOIN
        users u ON p.user_no = u.user_no
    LEFT OUTER JOIN
        files f ON p.post_no = f.post_no
    WHERE
        p.content LIKE '%${keyword}%'
    ORDER BY
        like_count DESC;
</select>



<!-- 작성자 이름으로 게시글 검색 -->
<select id="findBySchoolUserName" resultMap="PostMap">
   SELECT
        u.user_no,
        u.nickname,
        u.photo,
        p.post_no,
        s.school_no,
        p.created_at,
        (SELECT COUNT(*) FROM likes AS l WHERE l.post_no = p.post_no) AS like_count,
        (SELECT COUNT(*) FROM comments AS c WHERE c.post_no = p.post_no) AS comment_count,
        s.name AS school_name,
        s.photo AS school_photo,
        p.content,
        f.path,
        f.name,
        f.post_no
    FROM
        posts p
	INNER JOIN
		school_users su ON su.school_no = p.school_no
    INNER JOIN
        schools s ON s.school_no = su.school_no
    INNER JOIN
        users u ON su.user_no = u.user_no
    LEFT OUTER JOIN
        files f ON p.post_no = f.post_no
    WHERE
        u.nickname LIKE '%${keyword}%'
    ORDER BY
        like_count DESC;
</select>


<!-- 게시판 스쿨번호에 맞게 출력 -->

<select id="findBySchool" resultMap="PostMap" parameterType="int">
    SELECT
        u.user_no,
        u.nickname,
        p.post_no,
        p.school_no,
        p.created_at,
        (SELECT COUNT(*) FROM likes AS l WHERE l.post_no = p.post_no) AS like_count,
        (SELECT COUNT(*) FROM comments AS c WHERE c.post_no = p.post_no) AS comment_count,
        s.name AS school_name,
        s.photo AS school_photo,
        p.content,
        f.path,
        f.name,
        f.post_no
    FROM
        posts p
    INNER JOIN
        schools s ON s.school_no = p.school_no
    INNER JOIN
        users u ON p.user_no = u.user_no
    LEFT OUTER JOIN
        files f ON p.post_no = f.post_no
    WHERE
        p.school_no = #{schoolNo}
    ORDER BY
        like_count DESC;
</select>

  <select id="findByPost" resultMap="PostMap">

    select distinct

    p.school_no school_no,
    u.nickname,
    p.post_no post_no,
    u.photo,
    p.content,
    p.created_at

    FROM

    posts p


    inner join school_users  su on  p.user_no = su.user_no
    inner join users u on u.user_no = su.user_no


    where

    p.post_no=#{no}

    and p.school_no=#{schoolNo}
<!--    and p.school_no=1-->

  </select>
  <select id="findBySchoolPostList" resultMap="PostMap">


    SELECT DISTINCT

    p.school_no school_no,
    u.nickname,
    p.post_no,
    u.photo,
    p.content,
    f.name as file_name,
    p.created_at

    FROM

    posts as p

    INNER JOIN school_users su ON p.school_no = su.school_no
    INNER JOIN users u ON p.user_no = u.user_no
    LEFT OUTER JOIN schools s ON p.school_no = s.school_no
    LEFT OUTER JOIN comments c ON p.post_no = c.post_no
    LEFT OUTER JOIN files f ON p.post_no = f.post_no

    WHERE p.school_no=#{no}

    ORDER BY p.created_at DESC;


  </select>


</mapper>

<!--  <collection property="fileList" ofType="AttachedFile">-->
<!--    <id column="file_no" property="no"/>-->
<!--    <result column="file_path" property="filePath"/>-->
<!--    <result column="post_no" property="postNo"/>-->
<!--  </collection>-->
