<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="moyeora.myapp.dao.UserDao">
  <resultMap id="UserMap" type="User">
    <id column="user_no" property="no"/>
    <result column="name" property="name" />
    <result column="password" property="password"/>
    <result column="address" property="address"/>
    <result column="phone" property="phone"/>
    <result column="email" property="email"/>
    <result column="nickname" property="nickname"/>
    <result column="birth" property="birth"/>
    <result column="gender" property="gender"/>
    <result column="grade" property="grade"/>
    <result column="created_at" property="createdAt"/>
    <result column="profile" property="profile"/>
    <result column="manner_point" property="mannerPoint"/>
    <result column="photo" property="photo"/>
    <result column="address_detail" property="addressDetail"/>
    <result column="stop_date" property="stopDate"/>
    <result column="tag_no" property="no"/>
    <result column="login_type" property="loginType"/>
    <result column="provider" property="provider"/>
    <result column="provider_id" property="providerId"/>
    <result column="role" property="role"/>
    <result column="auth" property="auth"/>
    <collection property="tags" ofType="UserTag">
      <result column="user_no" property="userNo"/>
      <result column="tag_no" property="tagNo"/>
    </collection>
  </resultMap>

  <insert id="add" parameterType="User">
    insert into users(name,password,address,phone,email,nickname,birth,gender,profile,photo,manner_point)
    values(#{name},#{password},#{address},#{phone},#{email},#{nickname},#{birth},#{gender},#{profile},#{photo},36)
  </insert>

<select id="findBy" resultMap="UserMap" parameterType="int">
    select
        u.name,
        u.address,
        u.phone,
        u.email,
        u.nickname,
        u.birth,
        u.gender,
        u.grade,
        u.created_at,
        u.profile,
        u.manner_point,
        u.photo,
        u.address_detail,
        ut.user_no,
        ut.tag_no
    from
        users as u
    inner join
        user_tags as ut on u.user_no = ut.user_no
    where
        u.user_no =#{no};
</select>

  <insert id="add2" parameterType="list">
    insert into member_tags(user_no,tag_no)
    values(#{no},#{no})
  </insert>

  <insert id="save" parameterType="User" useGeneratedKeys="true" keyColumn="user_no" keyProperty="no">
    insert into users(name,email,phone,provider,provider_id,role,created_at)
    values(#{name},#{email},#{phone},#{provider},#{providerId},#{role},NOW())
  </insert>

  <delete id="delete" parameterType="int">
    delete from users where user_no=#{value}
  </delete>

  <select id="findAll" resultMap="UserMap">
    select
    user_no,
    nickname,
    email,
    created_at
    from
    user_no
  </select>

  <select id="findByNo" resultMap="UserMap" parameterType="int">
    select
      user_no,
      email,
      name,
    created_at
    from
    users
    where
    user_no=#{value}
  </select>

  <select id="findByEmail" resultMap="UserMap" parameterType="string">
    select
    user_no,
    email,
    password,
    name
    from
    users
    where
        email=#{email}
  </select>

  <update id="update" parameterType="User">
  update users set
  email=#{email},
  nickname=#{nickname},
  phone=#{phone},
  address=#{address},
  photo=#{photo}
  profile=#{profile}
  <if test="password != ''">
    , password=#{password}
  </if>
  where
  user_no=#{no}
  </update>

  <update id="updatePassword" parameterType="User">
    update users set
    password=#{password}
    where
    email=#{email}
  </update>

  <select id="findByNameAndPhone" resultType="string">
    select
      email
    from
      users
    where
      name=#{name}
      and phone=#{phone}
  </select>

  <select id="findOAuth2User" resultMap="UserMap">
    select
    user_no,
    email,
    name,
    role
    from
    users
    where
    email=#{email}
    and provider=#{provider}
  </select>

  <select id="findAllNoMaster" resultMap="UserMap">
    select
    user_no,
    name,
    auth,
    nickname,
    email,
    created_at,
    stop_date
    from
    users
    where
    auth &lt;= 1
    order by
    auth desc, created_at desc
    limit #{limit} offset #{offset}
  </select>

  <update id="updateBlackList">
    update
      users
    set
    stop_date =
        #{date}
    where
      user_no =
      #{userNo}
  </update>


  <update id="updateRole">
    update
    users
    set
    auth =
    #{auth}
    where
    user_no =
    #{userNo}
  </update>


  <select id="findByUserInfo" resultMap="UserMap">
    select
      user_no,
      name,
      auth,
      nickname,
      email,
      created_at,
      stop_date
    from
      users
    where
      auth &lt;= 1
    and
      (name like '%${userInfo}%' or nickname like '%${userInfo}%' or email like '%${userInfo}%')
    order by
    auth desc, created_at desc

  </select>


</mapper>