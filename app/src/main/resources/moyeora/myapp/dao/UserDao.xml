<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="moyeora.myapp.dao.UserDao">
  <resultMap id="UserMap" type="User">
    <id column="user_no" property="no"/>
    <result column="name" property="name" />
    <result column="password" property="password"/>
    <result column="address" property="address"/>
    <result column="phone" property="phone"/>
    <result column="email" property="email"/>
    <result column="nickname" property="nickname"/>
    <result column="birth" property="birth"/>
    <result column="gender" property="gender"/>
    <result column="grade" property="grade"/>
    <result column="created_at" property="createdAt"/>
    <result column="profile" property="profile"/>
    <result column="manner_point" property="mannerPoint"/>
    <result column="photo" property="photo"/>
    <result column="address_detail" property="addressDetail"/>
    <result column="stop_date" property="stopDate"/>
    <result column="tag_no" property="tagNo"/>
    <result column="login_type" property="loginType"/>
    <result column="provider" property="provider"/>
    <result column="provider_id" property="providerId"/>
    <result column="role" property="role"/>

    <result column="auth" property="auth"/>



    <collection property="tags" ofType="UserTag">
      <result column="user_no" property="userNo"/>
      <result column="tag_no" property="tagNo"/>
    </collection>

  </resultMap>

  <insert id="add" parameterType="User"
          useGeneratedKeys="true" keyColumn="user_no" keyProperty="no">
    insert into
    users(name,password,address,phone,email,nickname,birth,gender,grade,created_at,profile,manner_point,photo,address_detail,provider,provider_id,role)
    values(#{name},#{password},#{address},#{phone},#{email},#{nickname},#{birth},#{gender},#{grade},
    current_timestamp,#{profile},#{mannerPoint},#{photo},#{addressDetail},#{provider},#{providerId},#{role})
  </insert>

  <select id="findBy" resultMap="UserMap" parameterType="int">
      select
          u.user_no,
          u.name,
          u.address,
          u.phone,
          u.email,
          u.nickname,
          u.birth,
          u.gender,
          u.grade,
          u.created_at,
          u.profile,
          u.manner_point,
          u.photo,
          u.address_detail,
          ut.tag_no
      from
          users as u
      inner join
          user_tags as ut on u.user_no = ut.user_no
      where
          u.user_no =#{no};
  </select>


  <insert id="add2" parameterType="list">
    insert into member_tags(user_no,tag_no)
    values(#{no},#{no})
  </insert>

  <insert id="save" parameterType="User" useGeneratedKeys="true" keyColumn="user_no" keyProperty="no">
      insert into
      users(name,address,phone,email,nickname,birth,gender,created_at,profile,photo,address_detail,provider,provider_id,role)
      values(#{name},#{address},#{phone},#{email},#{nickname},#{birth},#{gender},NOW(),#{profile},#{photo},#{addressDetail},#{provider},#{providerId},#{role})
    </insert>

  <delete id="delete" parameterType="int">
    delete from users where user_no=#{value}
  </delete>

  <select id="findAll" resultMap="UserMap">
    select
    user_no,
    nickname,
    email,
    created_at
    from
    user_no
  </select>

  <select id="findByNo" resultMap="UserMap" parameterType="int">
    select
      user_no,
      email,
      name,
      nickname,
      photo,
      created_at,
      address
    from
    users
    where
    user_no=#{no}
  </select>

  <select id="findByEmail" resultMap="UserMap" parameterType="string">
      select
      user_no,
      email,
      password,
      name
      from
      users
      where
          email=#{email}
    </select>

   <update id="update" parameterType="User">
   update users set
       address=#{address},
       phone=#{phone},
       nickname=#{nickname},
       birth=#{birth},
       photo=#{photo},
       profile=#{profile},
       address_detail=#{addressDetail}
   where
       user_no=#{no};
      </update>

  <update id="updatePassword" parameterType="User">
    update users set
    password=#{password}
    where
    email=#{email}
  </update>

  <update id="passwordUpdate" parameterType="User">
  update users set
      password = #{password}
  where
      user_no=#{no}
  </update>

  <select id="findByNameAndPhone" resultType="string">
    select
    email
    from
    users
    where
    name=#{name}
    and phone=#{phone}
  </select>

  <select id="findOAuth2User" resultMap="UserMap">
    select
      user_no,
      email,
      name,
      role
    from
      users
    where
      email=#{email}
      and provider=#{provider}
  </select>

  <select id="findAllNoMaster" resultMap="UserMap">
    select
    user_no,
    name,
    auth,
    nickname,
    email,
    created_at,
    stop_date
    from
    users
    where
    auth &lt;= 1
    order by
    auth desc, created_at desc
    limit #{limit} offset #{offset}
  </select>

  <update id="updateBlackList">
    update
      users
    set
    stop_date =
        #{date}
    where
      user_no =
      #{userNo}
  </update>

  <select id="findUserGrade" resultType="int">
    SELECT
    grade
    FROM
    users
    WHERE
    user_no=#{userNo}
  </select>


  <update id="updateRole">
    update
    users
    set
    auth =
    #{auth}
    where
    user_no =
    #{userNo}
  </update>

  <select id="userProfile" resultType="int">
    SELECT
    name,
    photo
    FROM
    users
    WHERE
    user_no=#{userNo}
  </select>


  <select id="findByUserInfo" resultMap="UserMap">
    select
      user_no,
      name,
      auth,
      nickname,
      email,
      created_at,
      stop_date
    from
      users
    where
      auth &lt;= 1
    and
      (name like '%${userInfo}%' or nickname like '%${userInfo}%' or email like '%${userInfo}%')
    order by
    auth desc, created_at desc
  </select>

  <select id="findGroupByGender" resultType="moyeora.myapp.dto.admin.statistics.AdminUserGenderResponseDTO">
    select
    gender,
    count(gender) ctn
    from
    users
    group by gender
    order by ctn desc
  </select>

  <select id="findGroupByBirth" resultType="moyeora.myapp.dto.admin.statistics.AdminUserBirthResponseDTO">
    select
    substring(birth,1,4) as birthyear,
    count(*) as ctn
    from
    users
    group by birthyear
    order by ctn desc
  </select>

  <select id="findGroupByLocal" resultType="moyeora.myapp.dto.admin.statistics.AdminUserLocalResponseDTO">
    select
    substring_index(address, ' ', 1) as local,
    count(*) ctn
    from
    users
    group by local
    order by ctn desc
  </select>

  <resultMap id="ProfileMap" type="moyeora.myapp.dto.profile.ProfileResponseDTO">
    <id column="user_no" property="userNo"/>
    <result column="photo" property="photo"/>
    <result column="name" property="name"/>
    <result column="nickname" property="nickname"/>
    <result column="email" property="email"/>
    <result column="grade" property="grade"/>
    <result column="post_count" property="postCount"/>
    <result column="follower_count" property="followerCount"/>
    <result column="following_count" property="followingCount"/>
    <collection property="posts" ofType="moyeora.myapp.dto.profile.ProfilePostResponseDTO">
      <id column="post_no" property="postNo"/>
      <result column="content" property="content"/>
      <result column="created_at" property="createdAt"/>
      <result column="like_count" property="likeCount"/>
      <result column="comment_count" property="commentCount"/>
      <collection property="comments" ofType="moyeora.myapp.dto.profile.ProfileCommentResponseDTO">
        <id column="comment_no" property="commentNo"/>
        <result column="comment_content" property="commentContent"/>
        <result column="comment_created_at" property="commentCreatedAt"/>
        <association property="commentUser" javaType="moyeora.myapp.dto.profile.ProfileCommentUserResponseDTO">
          <id column="comment_user_no" property="commentUserNo"/>
          <result column="comment_user_email" property="commentUserEmail"/>
          <result column="comment_user_nickname" property="commentUserNickname"/>
          <result column="comment_user_photo" property="commentUserPhoto"/>
        </association>
      </collection>
    </collection>
  </resultMap>

  <select id="findAllPostsByUserNo" resultMap="ProfileMap">
    select
    u.user_no user_no,
    u.photo photo,
    u.name name,
    u.nickname nickname,
    u.email email,
    u.grade grade,
    (select count(*) from follows where follower_user_no = #{userNo}) follower_count,
    (select count(*) from follows where following_user_no = #{userNo}) following_count,
    (select count(*) from posts where user_no = #{userNo}) post_count,
    p.post_no post_no,
    p.content content,
    p.created_at created_at,
    (select count(*) from likes l where l.post_no = p.post_no) like_count,
    (select count(*) from comments c2 where c2.post_no=p.post_no) comment_count,
    c.comment_no comment_no,
    c.content comment_content,
    c.created_at comment_created_at,
    u2.user_no comment_user_no,
    u2.email comment_user_email,
    u2.nickname comment_user_nickname,
    u2.photo comment_user_photo
    from users u
    left outer join (select * from posts where user_no = #{userNo} limit #{limit} offset #{offset}) p on u.user_no = p.user_no
    left outer join comments c on p.post_no = c.post_no
    left outer join users u2 on c.user_no = u2.user_no
    where u.user_no = #{userNo}
    order by p.created_at desc, c.created_at desc
  </select>

  <select id="findSchoolPostByUserNo" resultMap="ProfileMap">
    select
    DISTINCT
    u.user_no user_no,
    u.photo photo,
    u.name name,
    u.nickname nickname,
    u.email email,
    p.post_no post_no,
    p.content content,
    p.created_at created_at,
    (select count(*) from likes l where l.post_no = p.post_no) like_count,
    (select count(*) from comments c2 where c2.post_no=p.post_no) comment_count,
    c.comment_no comment_no,
    c.content comment_content,
    c.created_at comment_created_at,
    u2.user_no comment_user_no,
    u2.email comment_user_email,
    u2.nickname comment_user_nickname,
    u2.photo comment_user_photo
    from users u
    left outer join (select * from posts limit 5 offset 0) p on u.user_no = p.user_no
    left outer join comments c on p.post_no = c.post_no
    left outer join users u2 on c.user_no = u2.user_no
    where p.school_no in (select school_no from school_users where user_no=#{userNo})
    order by p.created_at desc, c.created_at desc;
  </select>

  <select id="findFollowerPostByUserNo" resultMap="ProfileMap">
    select
    DISTINCT
    u.user_no user_no,
    u.photo photo,
    u.name name,
    u.nickname nickname,
    u.email email,
    p.post_no post_no,
    p.content content,
    p.created_at created_at,
    (select count(*) from likes l where l.post_no = p.post_no) like_count,
    (select count(*) from comments c2 where c2.post_no=p.post_no) comment_count,
    c.comment_no comment_no,
    c.content comment_content,
    c.created_at comment_created_at,
    u2.user_no comment_user_no,
    u2.email comment_user_email,
    u2.nickname comment_user_nickname,
    u2.photo comment_user_photo
    from users u
    left outer join (select * from posts limit 5 offset 0) p on u.user_no = p.user_no
    left outer join comments c on p.post_no = c.post_no
    left outer join users u2 on c.user_no = u2.user_no
    where u.user_no in (select follower_user_no from follows where following_user_no=#{userNo})
    order by p.created_at desc, c.created_at desc;
  </select>

  <select id="findLikePostByUserNo" resultMap="ProfileMap">
    select
    DISTINCT
    u.user_no user_no,
    u.photo photo,
    u.name name,
    u.nickname nickname,
    u.email email,
    p.post_no post_no,
    p.content content,
    p.created_at created_at,
    (select count(*) from likes l where l.post_no = p.post_no) like_count,
    (select count(*) from comments c2 where c2.post_no=p.post_no) comment_count,
    c.comment_no comment_no,
    c.content comment_content,
    c.created_at comment_created_at,
    u2.user_no comment_user_no,
    u2.email comment_user_email,
    u2.nickname comment_user_nickname,
    u2.photo comment_user_photo
    from users u
    left outer join (select * from posts limit 5 offset 0) p on u.user_no = p.user_no
    left outer join comments c on p.post_no = c.post_no
    left outer join users u2 on c.user_no = u2.user_no
    inner join school_tags st on p.school_no = st.school_no
    where st.tag_no in (select tag_no from user_tags where user_no=#{userNo})
    order by like_count desc;
  </select>
</mapper>